import 'package:flutter/services.dart' as lib;

import '../library.dart';

class ServicesLibrary extends FlutterLibrary {
  @override
  String get name => 'services';

  @override
  final List<String> widgets = [
  ];

  @override
  final Map<String, Function> classes = {
    'AndroidMotionEvent': lib.AndroidMotionEvent.new,
    'AndroidPointerCoords': lib.AndroidPointerCoords.new,
    'AndroidPointerProperties': lib.AndroidPointerProperties.new,
    'ApplicationSwitcherDescription': lib.ApplicationSwitcherDescription.new,
    'AssetMetadata': lib.AssetMetadata.new,
    'AutofillConfiguration': lib.AutofillConfiguration.new,
    'BasicMessageChannel': lib.BasicMessageChannel.new,
    'BinaryCodec': lib.BinaryCodec.new,
    'ChannelBuffers': lib.ChannelBuffers.new,
    'CharacterBoundary': lib.CharacterBoundary.new,
    'ClipboardData': lib.ClipboardData.new,
    'Color': lib.Color.new,
    'Color.fromARGB': lib.Color.fromARGB.call,
    'Color.fromRGBO': lib.Color.fromRGBO.call,
    'DefaultProcessTextService': lib.DefaultProcessTextService.new,
    'DefaultSpellCheckService': lib.DefaultSpellCheckService.new,
    'DiagnosticPropertiesBuilder': lib.DiagnosticPropertiesBuilder.new,
    'DiagnosticPropertiesBuilder.fromProperties': lib.DiagnosticPropertiesBuilder.fromProperties.call,
    'DocumentBoundary': lib.DocumentBoundary.new,
    'EventChannel': lib.EventChannel.new,
    'FilteringTextInputFormatter': lib.FilteringTextInputFormatter.new,
    'FilteringTextInputFormatter.allow': lib.FilteringTextInputFormatter.allow.call,
    'FilteringTextInputFormatter.deny': lib.FilteringTextInputFormatter.deny.call,
    'FontLoader': lib.FontLoader.new,
    'GLFWKeyHelper': lib.GLFWKeyHelper.new,
    'GtkKeyHelper': lib.GtkKeyHelper.new,
    'HardwareKeyboard': lib.HardwareKeyboard.new,
    'JSONMessageCodec': lib.JSONMessageCodec.new,
    'JSONMethodCodec': lib.JSONMethodCodec.new,
    'KeyboardInsertedContent': lib.KeyboardInsertedContent.new,
    'KeyboardInsertedContent.fromJson': lib.KeyboardInsertedContent.fromJson.call,
    'KeyData': lib.KeyData.new,
    'KeyDownEvent': lib.KeyDownEvent.new,
    'KeyEventManager': lib.KeyEventManager.new,
    'KeyMessage': lib.KeyMessage.new,
    'KeyRepeatEvent': lib.KeyRepeatEvent.new,
    'KeyUpEvent': lib.KeyUpEvent.new,
    'LengthLimitingTextInputFormatter': lib.LengthLimitingTextInputFormatter.new,
    'LineBoundary': lib.LineBoundary.new,
    'LogicalKeyboardKey': lib.LogicalKeyboardKey.new,
    'Matrix4': lib.Matrix4.new,
    'Matrix4.columns': lib.Matrix4.columns.call,
    'Matrix4.compose': lib.Matrix4.compose.call,
    'Matrix4.copy': lib.Matrix4.copy.call,
    'Matrix4.diagonal3': lib.Matrix4.diagonal3.call,
    'Matrix4.diagonal3Values': lib.Matrix4.diagonal3Values.call,
    'Matrix4.fromBuffer': lib.Matrix4.fromBuffer.call,
    'Matrix4.fromFloat64List': lib.Matrix4.fromFloat64List.call,
    'Matrix4.fromList': lib.Matrix4.fromList.call,
    'Matrix4.identity': lib.Matrix4.identity.call,
    'Matrix4.inverted': lib.Matrix4.inverted.call,
    'Matrix4.outer': lib.Matrix4.outer.call,
    'Matrix4.rotationX': lib.Matrix4.rotationX.call,
    'Matrix4.rotationY': lib.Matrix4.rotationY.call,
    'Matrix4.rotationZ': lib.Matrix4.rotationZ.call,
    'Matrix4.skew': lib.Matrix4.skew.call,
    'Matrix4.skewX': lib.Matrix4.skewX.call,
    'Matrix4.skewY': lib.Matrix4.skewY.call,
    'Matrix4.translation': lib.Matrix4.translation.call,
    'Matrix4.translationValues': lib.Matrix4.translationValues.call,
    'Matrix4.zero': lib.Matrix4.zero.call,
    'MethodCall': lib.MethodCall.new,
    'MethodChannel': lib.MethodChannel.new,
    'MouseCursorManager': lib.MouseCursorManager.new,
    'MouseTrackerAnnotation': lib.MouseTrackerAnnotation.new,
    'NetworkAssetBundle': lib.NetworkAssetBundle.new,
    'Offset': lib.Offset.new,
    'Offset.fromDirection': lib.Offset.fromDirection.call,
    'OptionalMethodChannel': lib.OptionalMethodChannel.new,
    'ParagraphBoundary': lib.ParagraphBoundary.new,
    'PhysicalKeyboardKey': lib.PhysicalKeyboardKey.new,
    'PlatformAssetBundle': lib.PlatformAssetBundle.new,
    'PointerEnterEvent': lib.PointerEnterEvent.new,
    'PointerEnterEvent.fromMouseEvent': lib.PointerEnterEvent.fromMouseEvent.call,
    'PointerExitEvent': lib.PointerExitEvent.new,
    'PointerExitEvent.fromMouseEvent': lib.PointerExitEvent.fromMouseEvent.call,
    'PointerHoverEvent': lib.PointerHoverEvent.new,
    'PredictiveBackEvent.fromMap': lib.PredictiveBackEvent.fromMap.call,
    'ProcessTextAction': lib.ProcessTextAction.new,
    'RawFloatingCursorPoint': lib.RawFloatingCursorPoint.new,
    'RawKeyDownEvent': lib.RawKeyDownEvent.new,
    'RawKeyEventDataAndroid': lib.RawKeyEventDataAndroid.new,
    'RawKeyEventDataFuchsia': lib.RawKeyEventDataFuchsia.new,
    'RawKeyEventDataIos': lib.RawKeyEventDataIos.new,
    'RawKeyEventDataLinux': lib.RawKeyEventDataLinux.new,
    'RawKeyEventDataMacOs': lib.RawKeyEventDataMacOs.new,
    'RawKeyEventDataWeb': lib.RawKeyEventDataWeb.new,
    'RawKeyEventDataWindows': lib.RawKeyEventDataWindows.new,
    'RawKeyUpEvent': lib.RawKeyUpEvent.new,
    'ReadBuffer': lib.ReadBuffer.new,
    'Rect.fromCenter': lib.Rect.fromCenter.call,
    'Rect.fromCircle': lib.Rect.fromCircle.call,
    'Rect.fromLTRB': lib.Rect.fromLTRB.call,
    'Rect.fromLTWH': lib.Rect.fromLTWH.call,
    'Rect.fromPoints': lib.Rect.fromPoints.call,
    'RestorationBucket.child': lib.RestorationBucket.child.call,
    'RestorationBucket.empty': lib.RestorationBucket.empty.call,
    'RestorationBucket.root': lib.RestorationBucket.root.call,
    'RestorationManager': lib.RestorationManager.new,
    'SelectionRect': lib.SelectionRect.new,
    'Size': lib.Size.new,
    'Size.copy': lib.Size.copy.call,
    'Size.fromHeight': lib.Size.fromHeight.call,
    'Size.fromRadius': lib.Size.fromRadius.call,
    'Size.fromWidth': lib.Size.fromWidth.call,
    'Size.square': lib.Size.square.call,
    'SpellCheckResults': lib.SpellCheckResults.new,
    'StandardMessageCodec': lib.StandardMessageCodec.new,
    'StandardMethodCodec': lib.StandardMethodCodec.new,
    'StringCodec': lib.StringCodec.new,
    'SuggestionSpan': lib.SuggestionSpan.new,
    'SystemContextMenuController': lib.SystemContextMenuController.new,
    'SystemUiOverlayStyle': lib.SystemUiOverlayStyle.new,
    'TextEditingDeltaDeletion': lib.TextEditingDeltaDeletion.new,
    'TextEditingDeltaInsertion': lib.TextEditingDeltaInsertion.new,
    'TextEditingDeltaNonTextUpdate': lib.TextEditingDeltaNonTextUpdate.new,
    'TextEditingDeltaReplacement': lib.TextEditingDeltaReplacement.new,
    'TextEditingValue': lib.TextEditingValue.new,
    'TextEditingValue.fromJSON': lib.TextEditingValue.fromJSON.call,
    'TextInputConfiguration': lib.TextInputConfiguration.new,
    'TextInputType.numberWithOptions': lib.TextInputType.numberWithOptions.call,
    'TextPosition': lib.TextPosition.new,
    'TextRange': lib.TextRange.new,
    'TextRange.collapsed': lib.TextRange.collapsed.call,
    'TextSelection': lib.TextSelection.new,
    'TextSelection.collapsed': lib.TextSelection.collapsed.call,
    'TextSelection.fromPosition': lib.TextSelection.fromPosition.call,
    'WriteBuffer': lib.WriteBuffer.new,
  };

  @override
  final Map<String, Function> functions = {
    'debugAssertAllServicesVarsUnset': lib.debugAssertAllServicesVarsUnset.call,
    'debugIsSerializableForRestoration': lib.debugIsSerializableForRestoration.call,
    'runeToLowerCase': lib.runeToLowerCase.call,
  };

  @override
  final Map<String, Object?> constants = {
    'appFlavor': lib.appFlavor,
    'kAndroidNumPadMap': lib.kAndroidNumPadMap,
    'kAndroidToLogicalKey': lib.kAndroidToLogicalKey,
    'kAndroidToPhysicalKey': lib.kAndroidToPhysicalKey,
    'kFuchsiaToLogicalKey': lib.kFuchsiaToLogicalKey,
    'kFuchsiaToPhysicalKey': lib.kFuchsiaToPhysicalKey,
    'kGlfwNumpadMap': lib.kGlfwNumpadMap,
    'kGlfwToLogicalKey': lib.kGlfwToLogicalKey,
    'kGtkNumpadMap': lib.kGtkNumpadMap,
    'kGtkToLogicalKey': lib.kGtkToLogicalKey,
    'kIosNumPadMap': lib.kIosNumPadMap,
    'kIosSpecialLogicalMap': lib.kIosSpecialLogicalMap,
    'kIosToLogicalKey': lib.kIosToLogicalKey,
    'kIosToPhysicalKey': lib.kIosToPhysicalKey,
    'kLinuxToPhysicalKey': lib.kLinuxToPhysicalKey,
    'kMacOsFunctionKeyMap': lib.kMacOsFunctionKeyMap,
    'kMacOsNumPadMap': lib.kMacOsNumPadMap,
    'kMacOsToLogicalKey': lib.kMacOsToLogicalKey,
    'kMacOsToPhysicalKey': lib.kMacOsToPhysicalKey,
    'kProfilePlatformChannels': lib.kProfilePlatformChannels,
    'kWebLocationMap': lib.kWebLocationMap,
    'kWebNumPadMap': lib.kWebNumPadMap,
    'kWebToLogicalKey': lib.kWebToLogicalKey,
    'kWebToPhysicalKey': lib.kWebToPhysicalKey,
    'kWindowsNumPadMap': lib.kWindowsNumPadMap,
    'kWindowsToLogicalKey': lib.kWindowsToLogicalKey,
    'kWindowsToPhysicalKey': lib.kWindowsToPhysicalKey,
  };

  @override
  final Map<String, List<Enum>> enums = {
    'Brightness': lib.Brightness.values,
    'DeviceOrientation': lib.DeviceOrientation.values,
    'DiagnosticLevel': lib.DiagnosticLevel.values,
    'FloatingCursorDragState': lib.FloatingCursorDragState.values,
    'KeyboardLockMode': lib.KeyboardLockMode.values,
    'KeyboardSide': lib.KeyboardSide.values,
    'KeyDataTransitMode': lib.KeyDataTransitMode.values,
    'MaxLengthEnforcement': lib.MaxLengthEnforcement.values,
    'ModifierKey': lib.ModifierKey.values,
    'SelectionChangedCause': lib.SelectionChangedCause.values,
    'ServicesServiceExtensions': lib.ServicesServiceExtensions.values,
    'SmartDashesType': lib.SmartDashesType.values,
    'SmartQuotesType': lib.SmartQuotesType.values,
    'SwipeEdge': lib.SwipeEdge.values,
    'SystemSoundType': lib.SystemSoundType.values,
    'SystemUiMode': lib.SystemUiMode.values,
    'SystemUiOverlay': lib.SystemUiOverlay.values,
    'TargetPlatform': lib.TargetPlatform.values,
    'TextAffinity': lib.TextAffinity.values,
    'TextAlign': lib.TextAlign.values,
    'TextCapitalization': lib.TextCapitalization.values,
    'TextDirection': lib.TextDirection.values,
    'TextInputAction': lib.TextInputAction.values,
    'UndoDirection': lib.UndoDirection.values,
  };
 
  @override
  final Map<String, Map<String, Object? Function()>> statics = {
    'AndroidPointerProperties': {
      'kToolTypeEraser': () => lib.AndroidPointerProperties.kToolTypeEraser,
      'kToolTypeFinger': () => lib.AndroidPointerProperties.kToolTypeFinger,
      'kToolTypeMouse': () => lib.AndroidPointerProperties.kToolTypeMouse,
      'kToolTypeStylus': () => lib.AndroidPointerProperties.kToolTypeStylus,
      'kToolTypeUnknown': () => lib.AndroidPointerProperties.kToolTypeUnknown,
    },
    'AndroidViewController': {
      'kActionCancel': () => lib.AndroidViewController.kActionCancel,
      'kActionDown': () => lib.AndroidViewController.kActionDown,
      'kActionMove': () => lib.AndroidViewController.kActionMove,
      'kActionPointerDown': () => lib.AndroidViewController.kActionPointerDown,
      'kActionPointerUp': () => lib.AndroidViewController.kActionPointerUp,
      'kActionUp': () => lib.AndroidViewController.kActionUp,
      'kAndroidLayoutDirectionLtr': () => lib.AndroidViewController.kAndroidLayoutDirectionLtr,
      'kAndroidLayoutDirectionRtl': () => lib.AndroidViewController.kAndroidLayoutDirectionRtl,
      'kInputDeviceSourceMouse': () => lib.AndroidViewController.kInputDeviceSourceMouse,
      'kInputDeviceSourceStylus': () => lib.AndroidViewController.kInputDeviceSourceStylus,
      'kInputDeviceSourceTouchPad': () => lib.AndroidViewController.kInputDeviceSourceTouchPad,
      'kInputDeviceSourceTouchScreen': () => lib.AndroidViewController.kInputDeviceSourceTouchScreen,
      'kInputDeviceSourceUnknown': () => lib.AndroidViewController.kInputDeviceSourceUnknown,
    },
    'AutofillConfiguration': {
      'disabled': () => lib.AutofillConfiguration.disabled,
    },
    'AutofillHints': {
      'addressCity': () => lib.AutofillHints.addressCity,
      'addressCityAndState': () => lib.AutofillHints.addressCityAndState,
      'addressState': () => lib.AutofillHints.addressState,
      'birthday': () => lib.AutofillHints.birthday,
      'birthdayDay': () => lib.AutofillHints.birthdayDay,
      'birthdayMonth': () => lib.AutofillHints.birthdayMonth,
      'birthdayYear': () => lib.AutofillHints.birthdayYear,
      'countryCode': () => lib.AutofillHints.countryCode,
      'countryName': () => lib.AutofillHints.countryName,
      'creditCardExpirationDate': () => lib.AutofillHints.creditCardExpirationDate,
      'creditCardExpirationDay': () => lib.AutofillHints.creditCardExpirationDay,
      'creditCardExpirationMonth': () => lib.AutofillHints.creditCardExpirationMonth,
      'creditCardExpirationYear': () => lib.AutofillHints.creditCardExpirationYear,
      'creditCardFamilyName': () => lib.AutofillHints.creditCardFamilyName,
      'creditCardGivenName': () => lib.AutofillHints.creditCardGivenName,
      'creditCardMiddleName': () => lib.AutofillHints.creditCardMiddleName,
      'creditCardName': () => lib.AutofillHints.creditCardName,
      'creditCardNumber': () => lib.AutofillHints.creditCardNumber,
      'creditCardSecurityCode': () => lib.AutofillHints.creditCardSecurityCode,
      'creditCardType': () => lib.AutofillHints.creditCardType,
      'email': () => lib.AutofillHints.email,
      'familyName': () => lib.AutofillHints.familyName,
      'fullStreetAddress': () => lib.AutofillHints.fullStreetAddress,
      'gender': () => lib.AutofillHints.gender,
      'givenName': () => lib.AutofillHints.givenName,
      'impp': () => lib.AutofillHints.impp,
      'jobTitle': () => lib.AutofillHints.jobTitle,
      'language': () => lib.AutofillHints.language,
      'location': () => lib.AutofillHints.location,
      'middleInitial': () => lib.AutofillHints.middleInitial,
      'middleName': () => lib.AutofillHints.middleName,
      'name': () => lib.AutofillHints.name,
      'namePrefix': () => lib.AutofillHints.namePrefix,
      'nameSuffix': () => lib.AutofillHints.nameSuffix,
      'newPassword': () => lib.AutofillHints.newPassword,
      'newUsername': () => lib.AutofillHints.newUsername,
      'nickname': () => lib.AutofillHints.nickname,
      'oneTimeCode': () => lib.AutofillHints.oneTimeCode,
      'organizationName': () => lib.AutofillHints.organizationName,
      'password': () => lib.AutofillHints.password,
      'photo': () => lib.AutofillHints.photo,
      'postalAddress': () => lib.AutofillHints.postalAddress,
      'postalAddressExtended': () => lib.AutofillHints.postalAddressExtended,
      'postalAddressExtendedPostalCode': () => lib.AutofillHints.postalAddressExtendedPostalCode,
      'postalCode': () => lib.AutofillHints.postalCode,
      'streetAddressLevel1': () => lib.AutofillHints.streetAddressLevel1,
      'streetAddressLevel2': () => lib.AutofillHints.streetAddressLevel2,
      'streetAddressLevel3': () => lib.AutofillHints.streetAddressLevel3,
      'streetAddressLevel4': () => lib.AutofillHints.streetAddressLevel4,
      'streetAddressLine1': () => lib.AutofillHints.streetAddressLine1,
      'streetAddressLine2': () => lib.AutofillHints.streetAddressLine2,
      'streetAddressLine3': () => lib.AutofillHints.streetAddressLine3,
      'sublocality': () => lib.AutofillHints.sublocality,
      'telephoneNumber': () => lib.AutofillHints.telephoneNumber,
      'telephoneNumberAreaCode': () => lib.AutofillHints.telephoneNumberAreaCode,
      'telephoneNumberCountryCode': () => lib.AutofillHints.telephoneNumberCountryCode,
      'telephoneNumberDevice': () => lib.AutofillHints.telephoneNumberDevice,
      'telephoneNumberExtension': () => lib.AutofillHints.telephoneNumberExtension,
      'telephoneNumberLocal': () => lib.AutofillHints.telephoneNumberLocal,
      'telephoneNumberLocalPrefix': () => lib.AutofillHints.telephoneNumberLocalPrefix,
      'telephoneNumberLocalSuffix': () => lib.AutofillHints.telephoneNumberLocalSuffix,
      'telephoneNumberNational': () => lib.AutofillHints.telephoneNumberNational,
      'transactionAmount': () => lib.AutofillHints.transactionAmount,
      'transactionCurrency': () => lib.AutofillHints.transactionCurrency,
      'url': () => lib.AutofillHints.url,
      'username': () => lib.AutofillHints.username,
    },
    'BackgroundIsolateBinaryMessenger': {
      'instance': () => lib.BackgroundIsolateBinaryMessenger.instance,
    },
    'BrowserContextMenu': {
      'enabled': () => lib.BrowserContextMenu.enabled,
    },
    'ChannelBuffers': {
      'kControlChannelName': () => lib.ChannelBuffers.kControlChannelName,
      'kDefaultBufferSize': () => lib.ChannelBuffers.kDefaultBufferSize,
    },
    'Clipboard': {
      'kTextPlain': () => lib.Clipboard.kTextPlain,
    },
    'FilteringTextInputFormatter': {
      'digitsOnly': () => lib.FilteringTextInputFormatter.digitsOnly,
      'singleLineFormatter': () => lib.FilteringTextInputFormatter.singleLineFormatter,
    },
    'FontWeight': {
      'bold': () => lib.FontWeight.bold,
      'normal': () => lib.FontWeight.normal,
      'values': () => lib.FontWeight.values,
      'w100': () => lib.FontWeight.w100,
      'w200': () => lib.FontWeight.w200,
      'w300': () => lib.FontWeight.w300,
      'w400': () => lib.FontWeight.w400,
      'w500': () => lib.FontWeight.w500,
      'w600': () => lib.FontWeight.w600,
      'w700': () => lib.FontWeight.w700,
      'w800': () => lib.FontWeight.w800,
      'w900': () => lib.FontWeight.w900,
    },
    'GLFWKeyHelper': {
      'modifierAlt': () => lib.GLFWKeyHelper.modifierAlt,
      'modifierCapsLock': () => lib.GLFWKeyHelper.modifierCapsLock,
      'modifierControl': () => lib.GLFWKeyHelper.modifierControl,
      'modifierMeta': () => lib.GLFWKeyHelper.modifierMeta,
      'modifierNumericPad': () => lib.GLFWKeyHelper.modifierNumericPad,
      'modifierShift': () => lib.GLFWKeyHelper.modifierShift,
    },
    'GtkKeyHelper': {
      'modifierCapsLock': () => lib.GtkKeyHelper.modifierCapsLock,
      'modifierControl': () => lib.GtkKeyHelper.modifierControl,
      'modifierMeta': () => lib.GtkKeyHelper.modifierMeta,
      'modifierMod1': () => lib.GtkKeyHelper.modifierMod1,
      'modifierMod2': () => lib.GtkKeyHelper.modifierMod2,
      'modifierShift': () => lib.GtkKeyHelper.modifierShift,
    },
    'HardwareKeyboard': {
      'instance': () => lib.HardwareKeyboard.instance,
    },
    'LogicalKeyboardKey': {
      'abort': () => lib.LogicalKeyboardKey.abort,
      'accel': () => lib.LogicalKeyboardKey.accel,
      'accept': () => lib.LogicalKeyboardKey.accept,
      'add': () => lib.LogicalKeyboardKey.add,
      'again': () => lib.LogicalKeyboardKey.again,
      'allCandidates': () => lib.LogicalKeyboardKey.allCandidates,
      'alphanumeric': () => lib.LogicalKeyboardKey.alphanumeric,
      'alt': () => lib.LogicalKeyboardKey.alt,
      'altGraph': () => lib.LogicalKeyboardKey.altGraph,
      'altLeft': () => lib.LogicalKeyboardKey.altLeft,
      'altRight': () => lib.LogicalKeyboardKey.altRight,
      'ampersand': () => lib.LogicalKeyboardKey.ampersand,
      'androidPlane': () => lib.LogicalKeyboardKey.androidPlane,
      'appSwitch': () => lib.LogicalKeyboardKey.appSwitch,
      'arrowDown': () => lib.LogicalKeyboardKey.arrowDown,
      'arrowLeft': () => lib.LogicalKeyboardKey.arrowLeft,
      'arrowRight': () => lib.LogicalKeyboardKey.arrowRight,
      'arrowUp': () => lib.LogicalKeyboardKey.arrowUp,
      'asterisk': () => lib.LogicalKeyboardKey.asterisk,
      'at': () => lib.LogicalKeyboardKey.at,
      'attn': () => lib.LogicalKeyboardKey.attn,
      'audioBalanceLeft': () => lib.LogicalKeyboardKey.audioBalanceLeft,
      'audioBalanceRight': () => lib.LogicalKeyboardKey.audioBalanceRight,
      'audioBassBoostDown': () => lib.LogicalKeyboardKey.audioBassBoostDown,
      'audioBassBoostToggle': () => lib.LogicalKeyboardKey.audioBassBoostToggle,
      'audioBassBoostUp': () => lib.LogicalKeyboardKey.audioBassBoostUp,
      'audioFaderFront': () => lib.LogicalKeyboardKey.audioFaderFront,
      'audioFaderRear': () => lib.LogicalKeyboardKey.audioFaderRear,
      'audioSurroundModeNext': () => lib.LogicalKeyboardKey.audioSurroundModeNext,
      'audioTrebleDown': () => lib.LogicalKeyboardKey.audioTrebleDown,
      'audioTrebleUp': () => lib.LogicalKeyboardKey.audioTrebleUp,
      'audioVolumeDown': () => lib.LogicalKeyboardKey.audioVolumeDown,
      'audioVolumeMute': () => lib.LogicalKeyboardKey.audioVolumeMute,
      'audioVolumeUp': () => lib.LogicalKeyboardKey.audioVolumeUp,
      'avrInput': () => lib.LogicalKeyboardKey.avrInput,
      'avrPower': () => lib.LogicalKeyboardKey.avrPower,
      'backquote': () => lib.LogicalKeyboardKey.backquote,
      'backslash': () => lib.LogicalKeyboardKey.backslash,
      'backspace': () => lib.LogicalKeyboardKey.backspace,
      'bar': () => lib.LogicalKeyboardKey.bar,
      'braceLeft': () => lib.LogicalKeyboardKey.braceLeft,
      'braceRight': () => lib.LogicalKeyboardKey.braceRight,
      'bracketLeft': () => lib.LogicalKeyboardKey.bracketLeft,
      'bracketRight': () => lib.LogicalKeyboardKey.bracketRight,
      'brightnessDown': () => lib.LogicalKeyboardKey.brightnessDown,
      'brightnessUp': () => lib.LogicalKeyboardKey.brightnessUp,
      'browserBack': () => lib.LogicalKeyboardKey.browserBack,
      'browserFavorites': () => lib.LogicalKeyboardKey.browserFavorites,
      'browserForward': () => lib.LogicalKeyboardKey.browserForward,
      'browserHome': () => lib.LogicalKeyboardKey.browserHome,
      'browserRefresh': () => lib.LogicalKeyboardKey.browserRefresh,
      'browserSearch': () => lib.LogicalKeyboardKey.browserSearch,
      'browserStop': () => lib.LogicalKeyboardKey.browserStop,
      'call': () => lib.LogicalKeyboardKey.call,
      'camera': () => lib.LogicalKeyboardKey.camera,
      'cameraFocus': () => lib.LogicalKeyboardKey.cameraFocus,
      'cancel': () => lib.LogicalKeyboardKey.cancel,
      'capsLock': () => lib.LogicalKeyboardKey.capsLock,
      'caret': () => lib.LogicalKeyboardKey.caret,
      'channelDown': () => lib.LogicalKeyboardKey.channelDown,
      'channelUp': () => lib.LogicalKeyboardKey.channelUp,
      'clear': () => lib.LogicalKeyboardKey.clear,
      'close': () => lib.LogicalKeyboardKey.close,
      'closedCaptionToggle': () => lib.LogicalKeyboardKey.closedCaptionToggle,
      'codeInput': () => lib.LogicalKeyboardKey.codeInput,
      'colon': () => lib.LogicalKeyboardKey.colon,
      'colorF0Red': () => lib.LogicalKeyboardKey.colorF0Red,
      'colorF1Green': () => lib.LogicalKeyboardKey.colorF1Green,
      'colorF2Yellow': () => lib.LogicalKeyboardKey.colorF2Yellow,
      'colorF3Blue': () => lib.LogicalKeyboardKey.colorF3Blue,
      'colorF4Grey': () => lib.LogicalKeyboardKey.colorF4Grey,
      'colorF5Brown': () => lib.LogicalKeyboardKey.colorF5Brown,
      'comma': () => lib.LogicalKeyboardKey.comma,
      'compose': () => lib.LogicalKeyboardKey.compose,
      'contextMenu': () => lib.LogicalKeyboardKey.contextMenu,
      'control': () => lib.LogicalKeyboardKey.control,
      'controlLeft': () => lib.LogicalKeyboardKey.controlLeft,
      'controlRight': () => lib.LogicalKeyboardKey.controlRight,
      'convert': () => lib.LogicalKeyboardKey.convert,
      'copy': () => lib.LogicalKeyboardKey.copy,
      'crSel': () => lib.LogicalKeyboardKey.crSel,
      'cut': () => lib.LogicalKeyboardKey.cut,
      'delete': () => lib.LogicalKeyboardKey.delete,
      'digit0': () => lib.LogicalKeyboardKey.digit0,
      'digit1': () => lib.LogicalKeyboardKey.digit1,
      'digit2': () => lib.LogicalKeyboardKey.digit2,
      'digit3': () => lib.LogicalKeyboardKey.digit3,
      'digit4': () => lib.LogicalKeyboardKey.digit4,
      'digit5': () => lib.LogicalKeyboardKey.digit5,
      'digit6': () => lib.LogicalKeyboardKey.digit6,
      'digit7': () => lib.LogicalKeyboardKey.digit7,
      'digit8': () => lib.LogicalKeyboardKey.digit8,
      'digit9': () => lib.LogicalKeyboardKey.digit9,
      'dimmer': () => lib.LogicalKeyboardKey.dimmer,
      'displaySwap': () => lib.LogicalKeyboardKey.displaySwap,
      'dollar': () => lib.LogicalKeyboardKey.dollar,
      'dvr': () => lib.LogicalKeyboardKey.dvr,
      'eisu': () => lib.LogicalKeyboardKey.eisu,
      'eject': () => lib.LogicalKeyboardKey.eject,
      'end': () => lib.LogicalKeyboardKey.end,
      'endCall': () => lib.LogicalKeyboardKey.endCall,
      'enter': () => lib.LogicalKeyboardKey.enter,
      'equal': () => lib.LogicalKeyboardKey.equal,
      'eraseEof': () => lib.LogicalKeyboardKey.eraseEof,
      'escape': () => lib.LogicalKeyboardKey.escape,
      'exclamation': () => lib.LogicalKeyboardKey.exclamation,
      'execute': () => lib.LogicalKeyboardKey.execute,
      'exit': () => lib.LogicalKeyboardKey.exit,
      'exSel': () => lib.LogicalKeyboardKey.exSel,
      'f1': () => lib.LogicalKeyboardKey.f1,
      'f2': () => lib.LogicalKeyboardKey.f2,
      'f3': () => lib.LogicalKeyboardKey.f3,
      'f4': () => lib.LogicalKeyboardKey.f4,
      'f5': () => lib.LogicalKeyboardKey.f5,
      'f6': () => lib.LogicalKeyboardKey.f6,
      'f7': () => lib.LogicalKeyboardKey.f7,
      'f8': () => lib.LogicalKeyboardKey.f8,
      'f9': () => lib.LogicalKeyboardKey.f9,
      'f10': () => lib.LogicalKeyboardKey.f10,
      'f11': () => lib.LogicalKeyboardKey.f11,
      'f12': () => lib.LogicalKeyboardKey.f12,
      'f13': () => lib.LogicalKeyboardKey.f13,
      'f14': () => lib.LogicalKeyboardKey.f14,
      'f15': () => lib.LogicalKeyboardKey.f15,
      'f16': () => lib.LogicalKeyboardKey.f16,
      'f17': () => lib.LogicalKeyboardKey.f17,
      'f18': () => lib.LogicalKeyboardKey.f18,
      'f19': () => lib.LogicalKeyboardKey.f19,
      'f20': () => lib.LogicalKeyboardKey.f20,
      'f21': () => lib.LogicalKeyboardKey.f21,
      'f22': () => lib.LogicalKeyboardKey.f22,
      'f23': () => lib.LogicalKeyboardKey.f23,
      'f24': () => lib.LogicalKeyboardKey.f24,
      'favoriteClear0': () => lib.LogicalKeyboardKey.favoriteClear0,
      'favoriteClear1': () => lib.LogicalKeyboardKey.favoriteClear1,
      'favoriteClear2': () => lib.LogicalKeyboardKey.favoriteClear2,
      'favoriteClear3': () => lib.LogicalKeyboardKey.favoriteClear3,
      'favoriteRecall0': () => lib.LogicalKeyboardKey.favoriteRecall0,
      'favoriteRecall1': () => lib.LogicalKeyboardKey.favoriteRecall1,
      'favoriteRecall2': () => lib.LogicalKeyboardKey.favoriteRecall2,
      'favoriteRecall3': () => lib.LogicalKeyboardKey.favoriteRecall3,
      'favoriteStore0': () => lib.LogicalKeyboardKey.favoriteStore0,
      'favoriteStore1': () => lib.LogicalKeyboardKey.favoriteStore1,
      'favoriteStore2': () => lib.LogicalKeyboardKey.favoriteStore2,
      'favoriteStore3': () => lib.LogicalKeyboardKey.favoriteStore3,
      'finalMode': () => lib.LogicalKeyboardKey.finalMode,
      'find': () => lib.LogicalKeyboardKey.find,
      'flutterPlane': () => lib.LogicalKeyboardKey.flutterPlane,
      'fn': () => lib.LogicalKeyboardKey.fn,
      'fnLock': () => lib.LogicalKeyboardKey.fnLock,
      'fuchsiaPlane': () => lib.LogicalKeyboardKey.fuchsiaPlane,
      'gameButton1': () => lib.LogicalKeyboardKey.gameButton1,
      'gameButton2': () => lib.LogicalKeyboardKey.gameButton2,
      'gameButton3': () => lib.LogicalKeyboardKey.gameButton3,
      'gameButton4': () => lib.LogicalKeyboardKey.gameButton4,
      'gameButton5': () => lib.LogicalKeyboardKey.gameButton5,
      'gameButton6': () => lib.LogicalKeyboardKey.gameButton6,
      'gameButton7': () => lib.LogicalKeyboardKey.gameButton7,
      'gameButton8': () => lib.LogicalKeyboardKey.gameButton8,
      'gameButton9': () => lib.LogicalKeyboardKey.gameButton9,
      'gameButton10': () => lib.LogicalKeyboardKey.gameButton10,
      'gameButton11': () => lib.LogicalKeyboardKey.gameButton11,
      'gameButton12': () => lib.LogicalKeyboardKey.gameButton12,
      'gameButton13': () => lib.LogicalKeyboardKey.gameButton13,
      'gameButton14': () => lib.LogicalKeyboardKey.gameButton14,
      'gameButton15': () => lib.LogicalKeyboardKey.gameButton15,
      'gameButton16': () => lib.LogicalKeyboardKey.gameButton16,
      'gameButtonA': () => lib.LogicalKeyboardKey.gameButtonA,
      'gameButtonB': () => lib.LogicalKeyboardKey.gameButtonB,
      'gameButtonC': () => lib.LogicalKeyboardKey.gameButtonC,
      'gameButtonLeft1': () => lib.LogicalKeyboardKey.gameButtonLeft1,
      'gameButtonLeft2': () => lib.LogicalKeyboardKey.gameButtonLeft2,
      'gameButtonMode': () => lib.LogicalKeyboardKey.gameButtonMode,
      'gameButtonRight1': () => lib.LogicalKeyboardKey.gameButtonRight1,
      'gameButtonRight2': () => lib.LogicalKeyboardKey.gameButtonRight2,
      'gameButtonSelect': () => lib.LogicalKeyboardKey.gameButtonSelect,
      'gameButtonStart': () => lib.LogicalKeyboardKey.gameButtonStart,
      'gameButtonThumbLeft': () => lib.LogicalKeyboardKey.gameButtonThumbLeft,
      'gameButtonThumbRight': () => lib.LogicalKeyboardKey.gameButtonThumbRight,
      'gameButtonX': () => lib.LogicalKeyboardKey.gameButtonX,
      'gameButtonY': () => lib.LogicalKeyboardKey.gameButtonY,
      'gameButtonZ': () => lib.LogicalKeyboardKey.gameButtonZ,
      'glfwPlane': () => lib.LogicalKeyboardKey.glfwPlane,
      'goBack': () => lib.LogicalKeyboardKey.goBack,
      'goHome': () => lib.LogicalKeyboardKey.goHome,
      'greater': () => lib.LogicalKeyboardKey.greater,
      'groupFirst': () => lib.LogicalKeyboardKey.groupFirst,
      'groupLast': () => lib.LogicalKeyboardKey.groupLast,
      'groupNext': () => lib.LogicalKeyboardKey.groupNext,
      'groupPrevious': () => lib.LogicalKeyboardKey.groupPrevious,
      'gtkPlane': () => lib.LogicalKeyboardKey.gtkPlane,
      'guide': () => lib.LogicalKeyboardKey.guide,
      'guideNextDay': () => lib.LogicalKeyboardKey.guideNextDay,
      'guidePreviousDay': () => lib.LogicalKeyboardKey.guidePreviousDay,
      'hangulMode': () => lib.LogicalKeyboardKey.hangulMode,
      'hanjaMode': () => lib.LogicalKeyboardKey.hanjaMode,
      'hankaku': () => lib.LogicalKeyboardKey.hankaku,
      'headsetHook': () => lib.LogicalKeyboardKey.headsetHook,
      'help': () => lib.LogicalKeyboardKey.help,
      'hibernate': () => lib.LogicalKeyboardKey.hibernate,
      'hiragana': () => lib.LogicalKeyboardKey.hiragana,
      'hiraganaKatakana': () => lib.LogicalKeyboardKey.hiraganaKatakana,
      'home': () => lib.LogicalKeyboardKey.home,
      'hyper': () => lib.LogicalKeyboardKey.hyper,
      'info': () => lib.LogicalKeyboardKey.info,
      'insert': () => lib.LogicalKeyboardKey.insert,
      'instantReplay': () => lib.LogicalKeyboardKey.instantReplay,
      'intlBackslash': () => lib.LogicalKeyboardKey.intlBackslash,
      'intlRo': () => lib.LogicalKeyboardKey.intlRo,
      'intlYen': () => lib.LogicalKeyboardKey.intlYen,
      'iosPlane': () => lib.LogicalKeyboardKey.iosPlane,
      'junjaMode': () => lib.LogicalKeyboardKey.junjaMode,
      'kanaMode': () => lib.LogicalKeyboardKey.kanaMode,
      'kanjiMode': () => lib.LogicalKeyboardKey.kanjiMode,
      'katakana': () => lib.LogicalKeyboardKey.katakana,
      'key11': () => lib.LogicalKeyboardKey.key11,
      'key12': () => lib.LogicalKeyboardKey.key12,
      'keyA': () => lib.LogicalKeyboardKey.keyA,
      'keyB': () => lib.LogicalKeyboardKey.keyB,
      'keyC': () => lib.LogicalKeyboardKey.keyC,
      'keyD': () => lib.LogicalKeyboardKey.keyD,
      'keyE': () => lib.LogicalKeyboardKey.keyE,
      'keyF': () => lib.LogicalKeyboardKey.keyF,
      'keyG': () => lib.LogicalKeyboardKey.keyG,
      'keyH': () => lib.LogicalKeyboardKey.keyH,
      'keyI': () => lib.LogicalKeyboardKey.keyI,
      'keyJ': () => lib.LogicalKeyboardKey.keyJ,
      'keyK': () => lib.LogicalKeyboardKey.keyK,
      'keyL': () => lib.LogicalKeyboardKey.keyL,
      'keyM': () => lib.LogicalKeyboardKey.keyM,
      'keyN': () => lib.LogicalKeyboardKey.keyN,
      'keyO': () => lib.LogicalKeyboardKey.keyO,
      'keyP': () => lib.LogicalKeyboardKey.keyP,
      'keyQ': () => lib.LogicalKeyboardKey.keyQ,
      'keyR': () => lib.LogicalKeyboardKey.keyR,
      'keyS': () => lib.LogicalKeyboardKey.keyS,
      'keyT': () => lib.LogicalKeyboardKey.keyT,
      'keyU': () => lib.LogicalKeyboardKey.keyU,
      'keyV': () => lib.LogicalKeyboardKey.keyV,
      'keyW': () => lib.LogicalKeyboardKey.keyW,
      'keyX': () => lib.LogicalKeyboardKey.keyX,
      'keyY': () => lib.LogicalKeyboardKey.keyY,
      'keyZ': () => lib.LogicalKeyboardKey.keyZ,
      'lang1': () => lib.LogicalKeyboardKey.lang1,
      'lang2': () => lib.LogicalKeyboardKey.lang2,
      'lang3': () => lib.LogicalKeyboardKey.lang3,
      'lang4': () => lib.LogicalKeyboardKey.lang4,
      'lang5': () => lib.LogicalKeyboardKey.lang5,
      'lastNumberRedial': () => lib.LogicalKeyboardKey.lastNumberRedial,
      'launchApplication1': () => lib.LogicalKeyboardKey.launchApplication1,
      'launchApplication2': () => lib.LogicalKeyboardKey.launchApplication2,
      'launchAssistant': () => lib.LogicalKeyboardKey.launchAssistant,
      'launchCalendar': () => lib.LogicalKeyboardKey.launchCalendar,
      'launchContacts': () => lib.LogicalKeyboardKey.launchContacts,
      'launchControlPanel': () => lib.LogicalKeyboardKey.launchControlPanel,
      'launchMail': () => lib.LogicalKeyboardKey.launchMail,
      'launchMediaPlayer': () => lib.LogicalKeyboardKey.launchMediaPlayer,
      'launchMusicPlayer': () => lib.LogicalKeyboardKey.launchMusicPlayer,
      'launchPhone': () => lib.LogicalKeyboardKey.launchPhone,
      'launchScreenSaver': () => lib.LogicalKeyboardKey.launchScreenSaver,
      'launchSpreadsheet': () => lib.LogicalKeyboardKey.launchSpreadsheet,
      'launchWebBrowser': () => lib.LogicalKeyboardKey.launchWebBrowser,
      'launchWebCam': () => lib.LogicalKeyboardKey.launchWebCam,
      'launchWordProcessor': () => lib.LogicalKeyboardKey.launchWordProcessor,
      'less': () => lib.LogicalKeyboardKey.less,
      'link': () => lib.LogicalKeyboardKey.link,
      'listProgram': () => lib.LogicalKeyboardKey.listProgram,
      'liveContent': () => lib.LogicalKeyboardKey.liveContent,
      'lock': () => lib.LogicalKeyboardKey.lock,
      'logOff': () => lib.LogicalKeyboardKey.logOff,
      'macosPlane': () => lib.LogicalKeyboardKey.macosPlane,
      'mailForward': () => lib.LogicalKeyboardKey.mailForward,
      'mailReply': () => lib.LogicalKeyboardKey.mailReply,
      'mailSend': () => lib.LogicalKeyboardKey.mailSend,
      'mannerMode': () => lib.LogicalKeyboardKey.mannerMode,
      'mediaApps': () => lib.LogicalKeyboardKey.mediaApps,
      'mediaAudioTrack': () => lib.LogicalKeyboardKey.mediaAudioTrack,
      'mediaClose': () => lib.LogicalKeyboardKey.mediaClose,
      'mediaFastForward': () => lib.LogicalKeyboardKey.mediaFastForward,
      'mediaLast': () => lib.LogicalKeyboardKey.mediaLast,
      'mediaPause': () => lib.LogicalKeyboardKey.mediaPause,
      'mediaPlay': () => lib.LogicalKeyboardKey.mediaPlay,
      'mediaPlayPause': () => lib.LogicalKeyboardKey.mediaPlayPause,
      'mediaRecord': () => lib.LogicalKeyboardKey.mediaRecord,
      'mediaRewind': () => lib.LogicalKeyboardKey.mediaRewind,
      'mediaSkip': () => lib.LogicalKeyboardKey.mediaSkip,
      'mediaSkipBackward': () => lib.LogicalKeyboardKey.mediaSkipBackward,
      'mediaSkipForward': () => lib.LogicalKeyboardKey.mediaSkipForward,
      'mediaStepBackward': () => lib.LogicalKeyboardKey.mediaStepBackward,
      'mediaStepForward': () => lib.LogicalKeyboardKey.mediaStepForward,
      'mediaStop': () => lib.LogicalKeyboardKey.mediaStop,
      'mediaTopMenu': () => lib.LogicalKeyboardKey.mediaTopMenu,
      'mediaTrackNext': () => lib.LogicalKeyboardKey.mediaTrackNext,
      'mediaTrackPrevious': () => lib.LogicalKeyboardKey.mediaTrackPrevious,
      'meta': () => lib.LogicalKeyboardKey.meta,
      'metaLeft': () => lib.LogicalKeyboardKey.metaLeft,
      'metaRight': () => lib.LogicalKeyboardKey.metaRight,
      'microphoneToggle': () => lib.LogicalKeyboardKey.microphoneToggle,
      'microphoneVolumeDown': () => lib.LogicalKeyboardKey.microphoneVolumeDown,
      'microphoneVolumeMute': () => lib.LogicalKeyboardKey.microphoneVolumeMute,
      'microphoneVolumeUp': () => lib.LogicalKeyboardKey.microphoneVolumeUp,
      'minus': () => lib.LogicalKeyboardKey.minus,
      'modeChange': () => lib.LogicalKeyboardKey.modeChange,
      'navigateIn': () => lib.LogicalKeyboardKey.navigateIn,
      'navigateNext': () => lib.LogicalKeyboardKey.navigateNext,
      'navigateOut': () => lib.LogicalKeyboardKey.navigateOut,
      'navigatePrevious': () => lib.LogicalKeyboardKey.navigatePrevious,
      'newKey': () => lib.LogicalKeyboardKey.newKey,
      'nextCandidate': () => lib.LogicalKeyboardKey.nextCandidate,
      'nextFavoriteChannel': () => lib.LogicalKeyboardKey.nextFavoriteChannel,
      'nextUserProfile': () => lib.LogicalKeyboardKey.nextUserProfile,
      'nonConvert': () => lib.LogicalKeyboardKey.nonConvert,
      'notification': () => lib.LogicalKeyboardKey.notification,
      'numberSign': () => lib.LogicalKeyboardKey.numberSign,
      'numLock': () => lib.LogicalKeyboardKey.numLock,
      'numpad0': () => lib.LogicalKeyboardKey.numpad0,
      'numpad1': () => lib.LogicalKeyboardKey.numpad1,
      'numpad2': () => lib.LogicalKeyboardKey.numpad2,
      'numpad3': () => lib.LogicalKeyboardKey.numpad3,
      'numpad4': () => lib.LogicalKeyboardKey.numpad4,
      'numpad5': () => lib.LogicalKeyboardKey.numpad5,
      'numpad6': () => lib.LogicalKeyboardKey.numpad6,
      'numpad7': () => lib.LogicalKeyboardKey.numpad7,
      'numpad8': () => lib.LogicalKeyboardKey.numpad8,
      'numpad9': () => lib.LogicalKeyboardKey.numpad9,
      'numpadAdd': () => lib.LogicalKeyboardKey.numpadAdd,
      'numpadComma': () => lib.LogicalKeyboardKey.numpadComma,
      'numpadDecimal': () => lib.LogicalKeyboardKey.numpadDecimal,
      'numpadDivide': () => lib.LogicalKeyboardKey.numpadDivide,
      'numpadEnter': () => lib.LogicalKeyboardKey.numpadEnter,
      'numpadEqual': () => lib.LogicalKeyboardKey.numpadEqual,
      'numpadMultiply': () => lib.LogicalKeyboardKey.numpadMultiply,
      'numpadParenLeft': () => lib.LogicalKeyboardKey.numpadParenLeft,
      'numpadParenRight': () => lib.LogicalKeyboardKey.numpadParenRight,
      'numpadSubtract': () => lib.LogicalKeyboardKey.numpadSubtract,
      'onDemand': () => lib.LogicalKeyboardKey.onDemand,
      'open': () => lib.LogicalKeyboardKey.open,
      'pageDown': () => lib.LogicalKeyboardKey.pageDown,
      'pageUp': () => lib.LogicalKeyboardKey.pageUp,
      'pairing': () => lib.LogicalKeyboardKey.pairing,
      'parenthesisLeft': () => lib.LogicalKeyboardKey.parenthesisLeft,
      'parenthesisRight': () => lib.LogicalKeyboardKey.parenthesisRight,
      'paste': () => lib.LogicalKeyboardKey.paste,
      'pause': () => lib.LogicalKeyboardKey.pause,
      'percent': () => lib.LogicalKeyboardKey.percent,
      'period': () => lib.LogicalKeyboardKey.period,
      'pInPDown': () => lib.LogicalKeyboardKey.pInPDown,
      'pInPMove': () => lib.LogicalKeyboardKey.pInPMove,
      'pInPToggle': () => lib.LogicalKeyboardKey.pInPToggle,
      'pInPUp': () => lib.LogicalKeyboardKey.pInPUp,
      'planeMask': () => lib.LogicalKeyboardKey.planeMask,
      'play': () => lib.LogicalKeyboardKey.play,
      'playSpeedDown': () => lib.LogicalKeyboardKey.playSpeedDown,
      'playSpeedReset': () => lib.LogicalKeyboardKey.playSpeedReset,
      'playSpeedUp': () => lib.LogicalKeyboardKey.playSpeedUp,
      'power': () => lib.LogicalKeyboardKey.power,
      'powerOff': () => lib.LogicalKeyboardKey.powerOff,
      'previousCandidate': () => lib.LogicalKeyboardKey.previousCandidate,
      'print': () => lib.LogicalKeyboardKey.print,
      'printScreen': () => lib.LogicalKeyboardKey.printScreen,
      'process': () => lib.LogicalKeyboardKey.process,
      'props': () => lib.LogicalKeyboardKey.props,
      'question': () => lib.LogicalKeyboardKey.question,
      'quote': () => lib.LogicalKeyboardKey.quote,
      'quoteSingle': () => lib.LogicalKeyboardKey.quoteSingle,
      'randomToggle': () => lib.LogicalKeyboardKey.randomToggle,
      'rcLowBattery': () => lib.LogicalKeyboardKey.rcLowBattery,
      'recordSpeedNext': () => lib.LogicalKeyboardKey.recordSpeedNext,
      'redo': () => lib.LogicalKeyboardKey.redo,
      'resume': () => lib.LogicalKeyboardKey.resume,
      'rfBypass': () => lib.LogicalKeyboardKey.rfBypass,
      'romaji': () => lib.LogicalKeyboardKey.romaji,
      'save': () => lib.LogicalKeyboardKey.save,
      'scanChannelsToggle': () => lib.LogicalKeyboardKey.scanChannelsToggle,
      'screenModeNext': () => lib.LogicalKeyboardKey.screenModeNext,
      'scrollLock': () => lib.LogicalKeyboardKey.scrollLock,
      'select': () => lib.LogicalKeyboardKey.select,
      'semicolon': () => lib.LogicalKeyboardKey.semicolon,
      'settings': () => lib.LogicalKeyboardKey.settings,
      'shift': () => lib.LogicalKeyboardKey.shift,
      'shiftLeft': () => lib.LogicalKeyboardKey.shiftLeft,
      'shiftLevel5': () => lib.LogicalKeyboardKey.shiftLevel5,
      'shiftRight': () => lib.LogicalKeyboardKey.shiftRight,
      'singleCandidate': () => lib.LogicalKeyboardKey.singleCandidate,
      'slash': () => lib.LogicalKeyboardKey.slash,
      'sleep': () => lib.LogicalKeyboardKey.sleep,
      'soft1': () => lib.LogicalKeyboardKey.soft1,
      'soft2': () => lib.LogicalKeyboardKey.soft2,
      'soft3': () => lib.LogicalKeyboardKey.soft3,
      'soft4': () => lib.LogicalKeyboardKey.soft4,
      'soft5': () => lib.LogicalKeyboardKey.soft5,
      'soft6': () => lib.LogicalKeyboardKey.soft6,
      'soft7': () => lib.LogicalKeyboardKey.soft7,
      'soft8': () => lib.LogicalKeyboardKey.soft8,
      'space': () => lib.LogicalKeyboardKey.space,
      'speechCorrectionList': () => lib.LogicalKeyboardKey.speechCorrectionList,
      'speechInputToggle': () => lib.LogicalKeyboardKey.speechInputToggle,
      'spellCheck': () => lib.LogicalKeyboardKey.spellCheck,
      'splitScreenToggle': () => lib.LogicalKeyboardKey.splitScreenToggle,
      'standby': () => lib.LogicalKeyboardKey.standby,
      'startOfPlatformPlanes': () => lib.LogicalKeyboardKey.startOfPlatformPlanes,
      'stbInput': () => lib.LogicalKeyboardKey.stbInput,
      'stbPower': () => lib.LogicalKeyboardKey.stbPower,
      'subtitle': () => lib.LogicalKeyboardKey.subtitle,
      'superKey': () => lib.LogicalKeyboardKey.superKey,
      'suspend': () => lib.LogicalKeyboardKey.suspend,
      'symbol': () => lib.LogicalKeyboardKey.symbol,
      'symbolLock': () => lib.LogicalKeyboardKey.symbolLock,
      'tab': () => lib.LogicalKeyboardKey.tab,
      'teletext': () => lib.LogicalKeyboardKey.teletext,
      'tilde': () => lib.LogicalKeyboardKey.tilde,
      'tv': () => lib.LogicalKeyboardKey.tv,
      'tv3DMode': () => lib.LogicalKeyboardKey.tv3DMode,
      'tvAntennaCable': () => lib.LogicalKeyboardKey.tvAntennaCable,
      'tvAudioDescription': () => lib.LogicalKeyboardKey.tvAudioDescription,
      'tvAudioDescriptionMixDown': () => lib.LogicalKeyboardKey.tvAudioDescriptionMixDown,
      'tvAudioDescriptionMixUp': () => lib.LogicalKeyboardKey.tvAudioDescriptionMixUp,
      'tvContentsMenu': () => lib.LogicalKeyboardKey.tvContentsMenu,
      'tvDataService': () => lib.LogicalKeyboardKey.tvDataService,
      'tvInput': () => lib.LogicalKeyboardKey.tvInput,
      'tvInputComponent1': () => lib.LogicalKeyboardKey.tvInputComponent1,
      'tvInputComponent2': () => lib.LogicalKeyboardKey.tvInputComponent2,
      'tvInputComposite1': () => lib.LogicalKeyboardKey.tvInputComposite1,
      'tvInputComposite2': () => lib.LogicalKeyboardKey.tvInputComposite2,
      'tvInputHDMI1': () => lib.LogicalKeyboardKey.tvInputHDMI1,
      'tvInputHDMI2': () => lib.LogicalKeyboardKey.tvInputHDMI2,
      'tvInputHDMI3': () => lib.LogicalKeyboardKey.tvInputHDMI3,
      'tvInputHDMI4': () => lib.LogicalKeyboardKey.tvInputHDMI4,
      'tvInputVGA1': () => lib.LogicalKeyboardKey.tvInputVGA1,
      'tvMediaContext': () => lib.LogicalKeyboardKey.tvMediaContext,
      'tvNetwork': () => lib.LogicalKeyboardKey.tvNetwork,
      'tvNumberEntry': () => lib.LogicalKeyboardKey.tvNumberEntry,
      'tvPower': () => lib.LogicalKeyboardKey.tvPower,
      'tvRadioService': () => lib.LogicalKeyboardKey.tvRadioService,
      'tvSatellite': () => lib.LogicalKeyboardKey.tvSatellite,
      'tvSatelliteBS': () => lib.LogicalKeyboardKey.tvSatelliteBS,
      'tvSatelliteCS': () => lib.LogicalKeyboardKey.tvSatelliteCS,
      'tvSatelliteToggle': () => lib.LogicalKeyboardKey.tvSatelliteToggle,
      'tvTerrestrialAnalog': () => lib.LogicalKeyboardKey.tvTerrestrialAnalog,
      'tvTerrestrialDigital': () => lib.LogicalKeyboardKey.tvTerrestrialDigital,
      'tvTimer': () => lib.LogicalKeyboardKey.tvTimer,
      'underscore': () => lib.LogicalKeyboardKey.underscore,
      'undo': () => lib.LogicalKeyboardKey.undo,
      'unicodePlane': () => lib.LogicalKeyboardKey.unicodePlane,
      'unidentified': () => lib.LogicalKeyboardKey.unidentified,
      'unprintablePlane': () => lib.LogicalKeyboardKey.unprintablePlane,
      'valueMask': () => lib.LogicalKeyboardKey.valueMask,
      'videoModeNext': () => lib.LogicalKeyboardKey.videoModeNext,
      'voiceDial': () => lib.LogicalKeyboardKey.voiceDial,
      'wakeUp': () => lib.LogicalKeyboardKey.wakeUp,
      'webPlane': () => lib.LogicalKeyboardKey.webPlane,
      'windowsPlane': () => lib.LogicalKeyboardKey.windowsPlane,
      'wink': () => lib.LogicalKeyboardKey.wink,
      'zenkaku': () => lib.LogicalKeyboardKey.zenkaku,
      'zenkakuHankaku': () => lib.LogicalKeyboardKey.zenkakuHankaku,
      'zoomIn': () => lib.LogicalKeyboardKey.zoomIn,
      'zoomOut': () => lib.LogicalKeyboardKey.zoomOut,
      'zoomToggle': () => lib.LogicalKeyboardKey.zoomToggle,
      'knownLogicalKeys': () => lib.LogicalKeyboardKey.knownLogicalKeys,
    },
    'MouseCursor': {
      'defer': () => lib.MouseCursor.defer,
      'uncontrolled': () => lib.MouseCursor.uncontrolled,
    },
    'Offset': {
      'infinite': () => lib.Offset.infinite,
      'zero': () => lib.Offset.zero,
    },
    'PhysicalKeyboardKey': {
      'abort': () => lib.PhysicalKeyboardKey.abort,
      'again': () => lib.PhysicalKeyboardKey.again,
      'altLeft': () => lib.PhysicalKeyboardKey.altLeft,
      'altRight': () => lib.PhysicalKeyboardKey.altRight,
      'arrowDown': () => lib.PhysicalKeyboardKey.arrowDown,
      'arrowLeft': () => lib.PhysicalKeyboardKey.arrowLeft,
      'arrowRight': () => lib.PhysicalKeyboardKey.arrowRight,
      'arrowUp': () => lib.PhysicalKeyboardKey.arrowUp,
      'audioVolumeDown': () => lib.PhysicalKeyboardKey.audioVolumeDown,
      'audioVolumeMute': () => lib.PhysicalKeyboardKey.audioVolumeMute,
      'audioVolumeUp': () => lib.PhysicalKeyboardKey.audioVolumeUp,
      'backquote': () => lib.PhysicalKeyboardKey.backquote,
      'backslash': () => lib.PhysicalKeyboardKey.backslash,
      'backspace': () => lib.PhysicalKeyboardKey.backspace,
      'bassBoost': () => lib.PhysicalKeyboardKey.bassBoost,
      'bracketLeft': () => lib.PhysicalKeyboardKey.bracketLeft,
      'bracketRight': () => lib.PhysicalKeyboardKey.bracketRight,
      'brightnessAuto': () => lib.PhysicalKeyboardKey.brightnessAuto,
      'brightnessDown': () => lib.PhysicalKeyboardKey.brightnessDown,
      'brightnessMaximum': () => lib.PhysicalKeyboardKey.brightnessMaximum,
      'brightnessMinimum': () => lib.PhysicalKeyboardKey.brightnessMinimum,
      'brightnessToggle': () => lib.PhysicalKeyboardKey.brightnessToggle,
      'brightnessUp': () => lib.PhysicalKeyboardKey.brightnessUp,
      'browserBack': () => lib.PhysicalKeyboardKey.browserBack,
      'browserFavorites': () => lib.PhysicalKeyboardKey.browserFavorites,
      'browserForward': () => lib.PhysicalKeyboardKey.browserForward,
      'browserHome': () => lib.PhysicalKeyboardKey.browserHome,
      'browserRefresh': () => lib.PhysicalKeyboardKey.browserRefresh,
      'browserSearch': () => lib.PhysicalKeyboardKey.browserSearch,
      'browserStop': () => lib.PhysicalKeyboardKey.browserStop,
      'capsLock': () => lib.PhysicalKeyboardKey.capsLock,
      'channelDown': () => lib.PhysicalKeyboardKey.channelDown,
      'channelUp': () => lib.PhysicalKeyboardKey.channelUp,
      'close': () => lib.PhysicalKeyboardKey.close,
      'closedCaptionToggle': () => lib.PhysicalKeyboardKey.closedCaptionToggle,
      'comma': () => lib.PhysicalKeyboardKey.comma,
      'contextMenu': () => lib.PhysicalKeyboardKey.contextMenu,
      'controlLeft': () => lib.PhysicalKeyboardKey.controlLeft,
      'controlRight': () => lib.PhysicalKeyboardKey.controlRight,
      'convert': () => lib.PhysicalKeyboardKey.convert,
      'copy': () => lib.PhysicalKeyboardKey.copy,
      'cut': () => lib.PhysicalKeyboardKey.cut,
      'delete': () => lib.PhysicalKeyboardKey.delete,
      'digit0': () => lib.PhysicalKeyboardKey.digit0,
      'digit1': () => lib.PhysicalKeyboardKey.digit1,
      'digit2': () => lib.PhysicalKeyboardKey.digit2,
      'digit3': () => lib.PhysicalKeyboardKey.digit3,
      'digit4': () => lib.PhysicalKeyboardKey.digit4,
      'digit5': () => lib.PhysicalKeyboardKey.digit5,
      'digit6': () => lib.PhysicalKeyboardKey.digit6,
      'digit7': () => lib.PhysicalKeyboardKey.digit7,
      'digit8': () => lib.PhysicalKeyboardKey.digit8,
      'digit9': () => lib.PhysicalKeyboardKey.digit9,
      'displayToggleIntExt': () => lib.PhysicalKeyboardKey.displayToggleIntExt,
      'eject': () => lib.PhysicalKeyboardKey.eject,
      'end': () => lib.PhysicalKeyboardKey.end,
      'enter': () => lib.PhysicalKeyboardKey.enter,
      'equal': () => lib.PhysicalKeyboardKey.equal,
      'escape': () => lib.PhysicalKeyboardKey.escape,
      'exit': () => lib.PhysicalKeyboardKey.exit,
      'f1': () => lib.PhysicalKeyboardKey.f1,
      'f2': () => lib.PhysicalKeyboardKey.f2,
      'f3': () => lib.PhysicalKeyboardKey.f3,
      'f4': () => lib.PhysicalKeyboardKey.f4,
      'f5': () => lib.PhysicalKeyboardKey.f5,
      'f6': () => lib.PhysicalKeyboardKey.f6,
      'f7': () => lib.PhysicalKeyboardKey.f7,
      'f8': () => lib.PhysicalKeyboardKey.f8,
      'f9': () => lib.PhysicalKeyboardKey.f9,
      'f10': () => lib.PhysicalKeyboardKey.f10,
      'f11': () => lib.PhysicalKeyboardKey.f11,
      'f12': () => lib.PhysicalKeyboardKey.f12,
      'f13': () => lib.PhysicalKeyboardKey.f13,
      'f14': () => lib.PhysicalKeyboardKey.f14,
      'f15': () => lib.PhysicalKeyboardKey.f15,
      'f16': () => lib.PhysicalKeyboardKey.f16,
      'f17': () => lib.PhysicalKeyboardKey.f17,
      'f18': () => lib.PhysicalKeyboardKey.f18,
      'f19': () => lib.PhysicalKeyboardKey.f19,
      'f20': () => lib.PhysicalKeyboardKey.f20,
      'f21': () => lib.PhysicalKeyboardKey.f21,
      'f22': () => lib.PhysicalKeyboardKey.f22,
      'f23': () => lib.PhysicalKeyboardKey.f23,
      'f24': () => lib.PhysicalKeyboardKey.f24,
      'find': () => lib.PhysicalKeyboardKey.find,
      'fn': () => lib.PhysicalKeyboardKey.fn,
      'fnLock': () => lib.PhysicalKeyboardKey.fnLock,
      'gameButton1': () => lib.PhysicalKeyboardKey.gameButton1,
      'gameButton2': () => lib.PhysicalKeyboardKey.gameButton2,
      'gameButton3': () => lib.PhysicalKeyboardKey.gameButton3,
      'gameButton4': () => lib.PhysicalKeyboardKey.gameButton4,
      'gameButton5': () => lib.PhysicalKeyboardKey.gameButton5,
      'gameButton6': () => lib.PhysicalKeyboardKey.gameButton6,
      'gameButton7': () => lib.PhysicalKeyboardKey.gameButton7,
      'gameButton8': () => lib.PhysicalKeyboardKey.gameButton8,
      'gameButton9': () => lib.PhysicalKeyboardKey.gameButton9,
      'gameButton10': () => lib.PhysicalKeyboardKey.gameButton10,
      'gameButton11': () => lib.PhysicalKeyboardKey.gameButton11,
      'gameButton12': () => lib.PhysicalKeyboardKey.gameButton12,
      'gameButton13': () => lib.PhysicalKeyboardKey.gameButton13,
      'gameButton14': () => lib.PhysicalKeyboardKey.gameButton14,
      'gameButton15': () => lib.PhysicalKeyboardKey.gameButton15,
      'gameButton16': () => lib.PhysicalKeyboardKey.gameButton16,
      'gameButtonA': () => lib.PhysicalKeyboardKey.gameButtonA,
      'gameButtonB': () => lib.PhysicalKeyboardKey.gameButtonB,
      'gameButtonC': () => lib.PhysicalKeyboardKey.gameButtonC,
      'gameButtonLeft1': () => lib.PhysicalKeyboardKey.gameButtonLeft1,
      'gameButtonLeft2': () => lib.PhysicalKeyboardKey.gameButtonLeft2,
      'gameButtonMode': () => lib.PhysicalKeyboardKey.gameButtonMode,
      'gameButtonRight1': () => lib.PhysicalKeyboardKey.gameButtonRight1,
      'gameButtonRight2': () => lib.PhysicalKeyboardKey.gameButtonRight2,
      'gameButtonSelect': () => lib.PhysicalKeyboardKey.gameButtonSelect,
      'gameButtonStart': () => lib.PhysicalKeyboardKey.gameButtonStart,
      'gameButtonThumbLeft': () => lib.PhysicalKeyboardKey.gameButtonThumbLeft,
      'gameButtonThumbRight': () => lib.PhysicalKeyboardKey.gameButtonThumbRight,
      'gameButtonX': () => lib.PhysicalKeyboardKey.gameButtonX,
      'gameButtonY': () => lib.PhysicalKeyboardKey.gameButtonY,
      'gameButtonZ': () => lib.PhysicalKeyboardKey.gameButtonZ,
      'help': () => lib.PhysicalKeyboardKey.help,
      'home': () => lib.PhysicalKeyboardKey.home,
      'hyper': () => lib.PhysicalKeyboardKey.hyper,
      'info': () => lib.PhysicalKeyboardKey.info,
      'insert': () => lib.PhysicalKeyboardKey.insert,
      'intlBackslash': () => lib.PhysicalKeyboardKey.intlBackslash,
      'intlRo': () => lib.PhysicalKeyboardKey.intlRo,
      'intlYen': () => lib.PhysicalKeyboardKey.intlYen,
      'kanaMode': () => lib.PhysicalKeyboardKey.kanaMode,
      'kbdIllumDown': () => lib.PhysicalKeyboardKey.kbdIllumDown,
      'kbdIllumUp': () => lib.PhysicalKeyboardKey.kbdIllumUp,
      'keyA': () => lib.PhysicalKeyboardKey.keyA,
      'keyB': () => lib.PhysicalKeyboardKey.keyB,
      'keyboardLayoutSelect': () => lib.PhysicalKeyboardKey.keyboardLayoutSelect,
      'keyC': () => lib.PhysicalKeyboardKey.keyC,
      'keyD': () => lib.PhysicalKeyboardKey.keyD,
      'keyE': () => lib.PhysicalKeyboardKey.keyE,
      'keyF': () => lib.PhysicalKeyboardKey.keyF,
      'keyG': () => lib.PhysicalKeyboardKey.keyG,
      'keyH': () => lib.PhysicalKeyboardKey.keyH,
      'keyI': () => lib.PhysicalKeyboardKey.keyI,
      'keyJ': () => lib.PhysicalKeyboardKey.keyJ,
      'keyK': () => lib.PhysicalKeyboardKey.keyK,
      'keyL': () => lib.PhysicalKeyboardKey.keyL,
      'keyM': () => lib.PhysicalKeyboardKey.keyM,
      'keyN': () => lib.PhysicalKeyboardKey.keyN,
      'keyO': () => lib.PhysicalKeyboardKey.keyO,
      'keyP': () => lib.PhysicalKeyboardKey.keyP,
      'keyQ': () => lib.PhysicalKeyboardKey.keyQ,
      'keyR': () => lib.PhysicalKeyboardKey.keyR,
      'keyS': () => lib.PhysicalKeyboardKey.keyS,
      'keyT': () => lib.PhysicalKeyboardKey.keyT,
      'keyU': () => lib.PhysicalKeyboardKey.keyU,
      'keyV': () => lib.PhysicalKeyboardKey.keyV,
      'keyW': () => lib.PhysicalKeyboardKey.keyW,
      'keyX': () => lib.PhysicalKeyboardKey.keyX,
      'keyY': () => lib.PhysicalKeyboardKey.keyY,
      'keyZ': () => lib.PhysicalKeyboardKey.keyZ,
      'lang1': () => lib.PhysicalKeyboardKey.lang1,
      'lang2': () => lib.PhysicalKeyboardKey.lang2,
      'lang3': () => lib.PhysicalKeyboardKey.lang3,
      'lang4': () => lib.PhysicalKeyboardKey.lang4,
      'lang5': () => lib.PhysicalKeyboardKey.lang5,
      'launchApp1': () => lib.PhysicalKeyboardKey.launchApp1,
      'launchApp2': () => lib.PhysicalKeyboardKey.launchApp2,
      'launchAssistant': () => lib.PhysicalKeyboardKey.launchAssistant,
      'launchAudioBrowser': () => lib.PhysicalKeyboardKey.launchAudioBrowser,
      'launchCalendar': () => lib.PhysicalKeyboardKey.launchCalendar,
      'launchContacts': () => lib.PhysicalKeyboardKey.launchContacts,
      'launchControlPanel': () => lib.PhysicalKeyboardKey.launchControlPanel,
      'launchDocuments': () => lib.PhysicalKeyboardKey.launchDocuments,
      'launchInternetBrowser': () => lib.PhysicalKeyboardKey.launchInternetBrowser,
      'launchKeyboardLayout': () => lib.PhysicalKeyboardKey.launchKeyboardLayout,
      'launchMail': () => lib.PhysicalKeyboardKey.launchMail,
      'launchPhone': () => lib.PhysicalKeyboardKey.launchPhone,
      'launchScreenSaver': () => lib.PhysicalKeyboardKey.launchScreenSaver,
      'launchSpreadsheet': () => lib.PhysicalKeyboardKey.launchSpreadsheet,
      'launchWordProcessor': () => lib.PhysicalKeyboardKey.launchWordProcessor,
      'lockScreen': () => lib.PhysicalKeyboardKey.lockScreen,
      'logOff': () => lib.PhysicalKeyboardKey.logOff,
      'mailForward': () => lib.PhysicalKeyboardKey.mailForward,
      'mailReply': () => lib.PhysicalKeyboardKey.mailReply,
      'mailSend': () => lib.PhysicalKeyboardKey.mailSend,
      'mediaFastForward': () => lib.PhysicalKeyboardKey.mediaFastForward,
      'mediaLast': () => lib.PhysicalKeyboardKey.mediaLast,
      'mediaPause': () => lib.PhysicalKeyboardKey.mediaPause,
      'mediaPlay': () => lib.PhysicalKeyboardKey.mediaPlay,
      'mediaPlayPause': () => lib.PhysicalKeyboardKey.mediaPlayPause,
      'mediaRecord': () => lib.PhysicalKeyboardKey.mediaRecord,
      'mediaRewind': () => lib.PhysicalKeyboardKey.mediaRewind,
      'mediaSelect': () => lib.PhysicalKeyboardKey.mediaSelect,
      'mediaStop': () => lib.PhysicalKeyboardKey.mediaStop,
      'mediaTrackNext': () => lib.PhysicalKeyboardKey.mediaTrackNext,
      'mediaTrackPrevious': () => lib.PhysicalKeyboardKey.mediaTrackPrevious,
      'metaLeft': () => lib.PhysicalKeyboardKey.metaLeft,
      'metaRight': () => lib.PhysicalKeyboardKey.metaRight,
      'microphoneMuteToggle': () => lib.PhysicalKeyboardKey.microphoneMuteToggle,
      'minus': () => lib.PhysicalKeyboardKey.minus,
      'newKey': () => lib.PhysicalKeyboardKey.newKey,
      'nonConvert': () => lib.PhysicalKeyboardKey.nonConvert,
      'numLock': () => lib.PhysicalKeyboardKey.numLock,
      'numpad0': () => lib.PhysicalKeyboardKey.numpad0,
      'numpad1': () => lib.PhysicalKeyboardKey.numpad1,
      'numpad2': () => lib.PhysicalKeyboardKey.numpad2,
      'numpad3': () => lib.PhysicalKeyboardKey.numpad3,
      'numpad4': () => lib.PhysicalKeyboardKey.numpad4,
      'numpad5': () => lib.PhysicalKeyboardKey.numpad5,
      'numpad6': () => lib.PhysicalKeyboardKey.numpad6,
      'numpad7': () => lib.PhysicalKeyboardKey.numpad7,
      'numpad8': () => lib.PhysicalKeyboardKey.numpad8,
      'numpad9': () => lib.PhysicalKeyboardKey.numpad9,
      'numpadAdd': () => lib.PhysicalKeyboardKey.numpadAdd,
      'numpadBackspace': () => lib.PhysicalKeyboardKey.numpadBackspace,
      'numpadClear': () => lib.PhysicalKeyboardKey.numpadClear,
      'numpadClearEntry': () => lib.PhysicalKeyboardKey.numpadClearEntry,
      'numpadComma': () => lib.PhysicalKeyboardKey.numpadComma,
      'numpadDecimal': () => lib.PhysicalKeyboardKey.numpadDecimal,
      'numpadDivide': () => lib.PhysicalKeyboardKey.numpadDivide,
      'numpadEnter': () => lib.PhysicalKeyboardKey.numpadEnter,
      'numpadEqual': () => lib.PhysicalKeyboardKey.numpadEqual,
      'numpadMemoryAdd': () => lib.PhysicalKeyboardKey.numpadMemoryAdd,
      'numpadMemoryClear': () => lib.PhysicalKeyboardKey.numpadMemoryClear,
      'numpadMemoryRecall': () => lib.PhysicalKeyboardKey.numpadMemoryRecall,
      'numpadMemoryStore': () => lib.PhysicalKeyboardKey.numpadMemoryStore,
      'numpadMemorySubtract': () => lib.PhysicalKeyboardKey.numpadMemorySubtract,
      'numpadMultiply': () => lib.PhysicalKeyboardKey.numpadMultiply,
      'numpadParenLeft': () => lib.PhysicalKeyboardKey.numpadParenLeft,
      'numpadParenRight': () => lib.PhysicalKeyboardKey.numpadParenRight,
      'numpadSignChange': () => lib.PhysicalKeyboardKey.numpadSignChange,
      'numpadSubtract': () => lib.PhysicalKeyboardKey.numpadSubtract,
      'open': () => lib.PhysicalKeyboardKey.open,
      'pageDown': () => lib.PhysicalKeyboardKey.pageDown,
      'pageUp': () => lib.PhysicalKeyboardKey.pageUp,
      'paste': () => lib.PhysicalKeyboardKey.paste,
      'pause': () => lib.PhysicalKeyboardKey.pause,
      'period': () => lib.PhysicalKeyboardKey.period,
      'power': () => lib.PhysicalKeyboardKey.power,
      'print': () => lib.PhysicalKeyboardKey.print,
      'printScreen': () => lib.PhysicalKeyboardKey.printScreen,
      'privacyScreenToggle': () => lib.PhysicalKeyboardKey.privacyScreenToggle,
      'programGuide': () => lib.PhysicalKeyboardKey.programGuide,
      'props': () => lib.PhysicalKeyboardKey.props,
      'quote': () => lib.PhysicalKeyboardKey.quote,
      'redo': () => lib.PhysicalKeyboardKey.redo,
      'resume': () => lib.PhysicalKeyboardKey.resume,
      'save': () => lib.PhysicalKeyboardKey.save,
      'scrollLock': () => lib.PhysicalKeyboardKey.scrollLock,
      'select': () => lib.PhysicalKeyboardKey.select,
      'selectTask': () => lib.PhysicalKeyboardKey.selectTask,
      'semicolon': () => lib.PhysicalKeyboardKey.semicolon,
      'shiftLeft': () => lib.PhysicalKeyboardKey.shiftLeft,
      'shiftRight': () => lib.PhysicalKeyboardKey.shiftRight,
      'showAllWindows': () => lib.PhysicalKeyboardKey.showAllWindows,
      'slash': () => lib.PhysicalKeyboardKey.slash,
      'sleep': () => lib.PhysicalKeyboardKey.sleep,
      'space': () => lib.PhysicalKeyboardKey.space,
      'speechInputToggle': () => lib.PhysicalKeyboardKey.speechInputToggle,
      'spellCheck': () => lib.PhysicalKeyboardKey.spellCheck,
      'superKey': () => lib.PhysicalKeyboardKey.superKey,
      'suspend': () => lib.PhysicalKeyboardKey.suspend,
      'tab': () => lib.PhysicalKeyboardKey.tab,
      'turbo': () => lib.PhysicalKeyboardKey.turbo,
      'undo': () => lib.PhysicalKeyboardKey.undo,
      'usbErrorRollOver': () => lib.PhysicalKeyboardKey.usbErrorRollOver,
      'usbErrorUndefined': () => lib.PhysicalKeyboardKey.usbErrorUndefined,
      'usbPostFail': () => lib.PhysicalKeyboardKey.usbPostFail,
      'usbReserved': () => lib.PhysicalKeyboardKey.usbReserved,
      'wakeUp': () => lib.PhysicalKeyboardKey.wakeUp,
      'zoomIn': () => lib.PhysicalKeyboardKey.zoomIn,
      'zoomOut': () => lib.PhysicalKeyboardKey.zoomOut,
      'zoomToggle': () => lib.PhysicalKeyboardKey.zoomToggle,
      'knownPhysicalKeys': () => lib.PhysicalKeyboardKey.knownPhysicalKeys,
    },
    'RawKeyboard': {
      'instance': () => lib.RawKeyboard.instance,
    },
    'RawKeyEventDataAndroid': {
      'modifierAlt': () => lib.RawKeyEventDataAndroid.modifierAlt,
      'modifierCapsLock': () => lib.RawKeyEventDataAndroid.modifierCapsLock,
      'modifierControl': () => lib.RawKeyEventDataAndroid.modifierControl,
      'modifierFunction': () => lib.RawKeyEventDataAndroid.modifierFunction,
      'modifierLeftAlt': () => lib.RawKeyEventDataAndroid.modifierLeftAlt,
      'modifierLeftControl': () => lib.RawKeyEventDataAndroid.modifierLeftControl,
      'modifierLeftMeta': () => lib.RawKeyEventDataAndroid.modifierLeftMeta,
      'modifierLeftShift': () => lib.RawKeyEventDataAndroid.modifierLeftShift,
      'modifierMeta': () => lib.RawKeyEventDataAndroid.modifierMeta,
      'modifierNone': () => lib.RawKeyEventDataAndroid.modifierNone,
      'modifierNumLock': () => lib.RawKeyEventDataAndroid.modifierNumLock,
      'modifierRightAlt': () => lib.RawKeyEventDataAndroid.modifierRightAlt,
      'modifierRightControl': () => lib.RawKeyEventDataAndroid.modifierRightControl,
      'modifierRightMeta': () => lib.RawKeyEventDataAndroid.modifierRightMeta,
      'modifierRightShift': () => lib.RawKeyEventDataAndroid.modifierRightShift,
      'modifierScrollLock': () => lib.RawKeyEventDataAndroid.modifierScrollLock,
      'modifierShift': () => lib.RawKeyEventDataAndroid.modifierShift,
      'modifierSym': () => lib.RawKeyEventDataAndroid.modifierSym,
    },
    'RawKeyEventDataFuchsia': {
      'modifierAlt': () => lib.RawKeyEventDataFuchsia.modifierAlt,
      'modifierCapsLock': () => lib.RawKeyEventDataFuchsia.modifierCapsLock,
      'modifierControl': () => lib.RawKeyEventDataFuchsia.modifierControl,
      'modifierLeftAlt': () => lib.RawKeyEventDataFuchsia.modifierLeftAlt,
      'modifierLeftControl': () => lib.RawKeyEventDataFuchsia.modifierLeftControl,
      'modifierLeftMeta': () => lib.RawKeyEventDataFuchsia.modifierLeftMeta,
      'modifierLeftShift': () => lib.RawKeyEventDataFuchsia.modifierLeftShift,
      'modifierMeta': () => lib.RawKeyEventDataFuchsia.modifierMeta,
      'modifierNone': () => lib.RawKeyEventDataFuchsia.modifierNone,
      'modifierRightAlt': () => lib.RawKeyEventDataFuchsia.modifierRightAlt,
      'modifierRightControl': () => lib.RawKeyEventDataFuchsia.modifierRightControl,
      'modifierRightMeta': () => lib.RawKeyEventDataFuchsia.modifierRightMeta,
      'modifierRightShift': () => lib.RawKeyEventDataFuchsia.modifierRightShift,
      'modifierShift': () => lib.RawKeyEventDataFuchsia.modifierShift,
    },
    'RawKeyEventDataIos': {
      'deviceIndependentMask': () => lib.RawKeyEventDataIos.deviceIndependentMask,
      'modifierCapsLock': () => lib.RawKeyEventDataIos.modifierCapsLock,
      'modifierCommand': () => lib.RawKeyEventDataIos.modifierCommand,
      'modifierControl': () => lib.RawKeyEventDataIos.modifierControl,
      'modifierFunction': () => lib.RawKeyEventDataIos.modifierFunction,
      'modifierHelp': () => lib.RawKeyEventDataIos.modifierHelp,
      'modifierLeftCommand': () => lib.RawKeyEventDataIos.modifierLeftCommand,
      'modifierLeftControl': () => lib.RawKeyEventDataIos.modifierLeftControl,
      'modifierLeftOption': () => lib.RawKeyEventDataIos.modifierLeftOption,
      'modifierLeftShift': () => lib.RawKeyEventDataIos.modifierLeftShift,
      'modifierNumericPad': () => lib.RawKeyEventDataIos.modifierNumericPad,
      'modifierOption': () => lib.RawKeyEventDataIos.modifierOption,
      'modifierRightCommand': () => lib.RawKeyEventDataIos.modifierRightCommand,
      'modifierRightControl': () => lib.RawKeyEventDataIos.modifierRightControl,
      'modifierRightOption': () => lib.RawKeyEventDataIos.modifierRightOption,
      'modifierRightShift': () => lib.RawKeyEventDataIos.modifierRightShift,
      'modifierShift': () => lib.RawKeyEventDataIos.modifierShift,
    },
    'RawKeyEventDataMacOs': {
      'deviceIndependentMask': () => lib.RawKeyEventDataMacOs.deviceIndependentMask,
      'modifierCapsLock': () => lib.RawKeyEventDataMacOs.modifierCapsLock,
      'modifierCommand': () => lib.RawKeyEventDataMacOs.modifierCommand,
      'modifierControl': () => lib.RawKeyEventDataMacOs.modifierControl,
      'modifierFunction': () => lib.RawKeyEventDataMacOs.modifierFunction,
      'modifierHelp': () => lib.RawKeyEventDataMacOs.modifierHelp,
      'modifierLeftCommand': () => lib.RawKeyEventDataMacOs.modifierLeftCommand,
      'modifierLeftControl': () => lib.RawKeyEventDataMacOs.modifierLeftControl,
      'modifierLeftOption': () => lib.RawKeyEventDataMacOs.modifierLeftOption,
      'modifierLeftShift': () => lib.RawKeyEventDataMacOs.modifierLeftShift,
      'modifierNumericPad': () => lib.RawKeyEventDataMacOs.modifierNumericPad,
      'modifierOption': () => lib.RawKeyEventDataMacOs.modifierOption,
      'modifierRightCommand': () => lib.RawKeyEventDataMacOs.modifierRightCommand,
      'modifierRightControl': () => lib.RawKeyEventDataMacOs.modifierRightControl,
      'modifierRightOption': () => lib.RawKeyEventDataMacOs.modifierRightOption,
      'modifierRightShift': () => lib.RawKeyEventDataMacOs.modifierRightShift,
      'modifierShift': () => lib.RawKeyEventDataMacOs.modifierShift,
    },
    'RawKeyEventDataWeb': {
      'modifierAlt': () => lib.RawKeyEventDataWeb.modifierAlt,
      'modifierCapsLock': () => lib.RawKeyEventDataWeb.modifierCapsLock,
      'modifierControl': () => lib.RawKeyEventDataWeb.modifierControl,
      'modifierMeta': () => lib.RawKeyEventDataWeb.modifierMeta,
      'modifierNone': () => lib.RawKeyEventDataWeb.modifierNone,
      'modifierNumLock': () => lib.RawKeyEventDataWeb.modifierNumLock,
      'modifierScrollLock': () => lib.RawKeyEventDataWeb.modifierScrollLock,
      'modifierShift': () => lib.RawKeyEventDataWeb.modifierShift,
    },
    'RawKeyEventDataWindows': {
      'modifierAlt': () => lib.RawKeyEventDataWindows.modifierAlt,
      'modifierCaps': () => lib.RawKeyEventDataWindows.modifierCaps,
      'modifierControl': () => lib.RawKeyEventDataWindows.modifierControl,
      'modifierLeftAlt': () => lib.RawKeyEventDataWindows.modifierLeftAlt,
      'modifierLeftControl': () => lib.RawKeyEventDataWindows.modifierLeftControl,
      'modifierLeftMeta': () => lib.RawKeyEventDataWindows.modifierLeftMeta,
      'modifierLeftShift': () => lib.RawKeyEventDataWindows.modifierLeftShift,
      'modifierNumLock': () => lib.RawKeyEventDataWindows.modifierNumLock,
      'modifierRightAlt': () => lib.RawKeyEventDataWindows.modifierRightAlt,
      'modifierRightControl': () => lib.RawKeyEventDataWindows.modifierRightControl,
      'modifierRightMeta': () => lib.RawKeyEventDataWindows.modifierRightMeta,
      'modifierRightShift': () => lib.RawKeyEventDataWindows.modifierRightShift,
      'modifierScrollLock': () => lib.RawKeyEventDataWindows.modifierScrollLock,
      'modifierShift': () => lib.RawKeyEventDataWindows.modifierShift,
    },
    'Rect': {
      'largest': () => lib.Rect.largest,
      'zero': () => lib.Rect.zero,
    },
    'RootIsolateToken': {
      'instance': () => lib.RootIsolateToken.instance,
    },
    'Size': {
      'infinite': () => lib.Size.infinite,
      'zero': () => lib.Size.zero,
    },
    'SystemChannels': {
      'accessibility': () => lib.SystemChannels.accessibility,
      'backGesture': () => lib.SystemChannels.backGesture,
      'contextMenu': () => lib.SystemChannels.contextMenu,
      'deferredComponent': () => lib.SystemChannels.deferredComponent,
      'keyboard': () => lib.SystemChannels.keyboard,
      'keyEvent': () => lib.SystemChannels.keyEvent,
      'lifecycle': () => lib.SystemChannels.lifecycle,
      'localization': () => lib.SystemChannels.localization,
      'menu': () => lib.SystemChannels.menu,
      'mouseCursor': () => lib.SystemChannels.mouseCursor,
      'navigation': () => lib.SystemChannels.navigation,
      'platform': () => lib.SystemChannels.platform,
      'platform_views': () => lib.SystemChannels.platform_views,
      'processText': () => lib.SystemChannels.processText,
      'restoration': () => lib.SystemChannels.restoration,
      'skia': () => lib.SystemChannels.skia,
      'spellCheck': () => lib.SystemChannels.spellCheck,
      'system': () => lib.SystemChannels.system,
      'textInput': () => lib.SystemChannels.textInput,
      'undoManager': () => lib.SystemChannels.undoManager,
    },
    'SystemChrome': {
      'latestStyle': () => lib.SystemChrome.latestStyle,
    },
    'SystemMouseCursors': {
      'alias': () => lib.SystemMouseCursors.alias,
      'allScroll': () => lib.SystemMouseCursors.allScroll,
      'basic': () => lib.SystemMouseCursors.basic,
      'cell': () => lib.SystemMouseCursors.cell,
      'click': () => lib.SystemMouseCursors.click,
      'contextMenu': () => lib.SystemMouseCursors.contextMenu,
      'copy': () => lib.SystemMouseCursors.copy,
      'disappearing': () => lib.SystemMouseCursors.disappearing,
      'forbidden': () => lib.SystemMouseCursors.forbidden,
      'grab': () => lib.SystemMouseCursors.grab,
      'grabbing': () => lib.SystemMouseCursors.grabbing,
      'help': () => lib.SystemMouseCursors.help,
      'move': () => lib.SystemMouseCursors.move,
      'noDrop': () => lib.SystemMouseCursors.noDrop,
      'none': () => lib.SystemMouseCursors.none,
      'precise': () => lib.SystemMouseCursors.precise,
      'progress': () => lib.SystemMouseCursors.progress,
      'resizeColumn': () => lib.SystemMouseCursors.resizeColumn,
      'resizeDown': () => lib.SystemMouseCursors.resizeDown,
      'resizeDownLeft': () => lib.SystemMouseCursors.resizeDownLeft,
      'resizeDownRight': () => lib.SystemMouseCursors.resizeDownRight,
      'resizeLeft': () => lib.SystemMouseCursors.resizeLeft,
      'resizeLeftRight': () => lib.SystemMouseCursors.resizeLeftRight,
      'resizeRight': () => lib.SystemMouseCursors.resizeRight,
      'resizeRow': () => lib.SystemMouseCursors.resizeRow,
      'resizeUp': () => lib.SystemMouseCursors.resizeUp,
      'resizeUpDown': () => lib.SystemMouseCursors.resizeUpDown,
      'resizeUpLeft': () => lib.SystemMouseCursors.resizeUpLeft,
      'resizeUpLeftDownRight': () => lib.SystemMouseCursors.resizeUpLeftDownRight,
      'resizeUpRight': () => lib.SystemMouseCursors.resizeUpRight,
      'resizeUpRightDownLeft': () => lib.SystemMouseCursors.resizeUpRightDownLeft,
      'text': () => lib.SystemMouseCursors.text,
      'verticalText': () => lib.SystemMouseCursors.verticalText,
      'wait': () => lib.SystemMouseCursors.wait,
      'zoomIn': () => lib.SystemMouseCursors.zoomIn,
      'zoomOut': () => lib.SystemMouseCursors.zoomOut,
    },
    'SystemUiOverlayStyle': {
      'dark': () => lib.SystemUiOverlayStyle.dark,
      'light': () => lib.SystemUiOverlayStyle.light,
    },
    'TextEditingValue': {
      'empty': () => lib.TextEditingValue.empty,
    },
    'TextInput': {
      'scribbleClients': () => lib.TextInput.scribbleClients,
    },
    'TextInputType': {
      'datetime': () => lib.TextInputType.datetime,
      'emailAddress': () => lib.TextInputType.emailAddress,
      'multiline': () => lib.TextInputType.multiline,
      'name': () => lib.TextInputType.name,
      'none': () => lib.TextInputType.none,
      'number': () => lib.TextInputType.number,
      'phone': () => lib.TextInputType.phone,
      'streetAddress': () => lib.TextInputType.streetAddress,
      'text': () => lib.TextInputType.text,
      'url': () => lib.TextInputType.url,
      'values': () => lib.TextInputType.values,
      'visiblePassword': () => lib.TextInputType.visiblePassword,
    },
    'TextRange': {
      'empty': () => lib.TextRange.empty,
    },
    'Uint8List': {
      'bytesPerElement': () => lib.Uint8List.bytesPerElement,
    },
    'UndoManager': {
      'client': () => lib.UndoManager.client,
    },
  };
}
